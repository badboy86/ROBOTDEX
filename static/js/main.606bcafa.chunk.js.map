{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.componenet.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,6BAAKL,EAAMI,QAAQE,OACnB,kCAAKN,EAAMI,QAAQG,aCJdC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KACb,SAAAN,GAAO,OACH,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJpBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACVG,SAAUF,MC6BNG,E,kDAlCb,aAAc,IAAD,8BACX,gBAMFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SANpC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAY,IAJH,E,qDAUb,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAEzC,WAAS,IAAD,EACwBC,KAAKN,MAA5Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACI,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,uBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BZI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.606bcafa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'> \r\n        <img alt='monter' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h4>{props.monster.name }</h4>\r\n        <p> {props.monster.email }</p>\r\n    </div>\r\n\r\n\r\n); ","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n     {\r\n        props.monsters.map(\r\n          monster => (\r\n              <Card key={monster.id} monster={monster} />\r\n        )\r\n        )\r\n     }\r\n        \r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n           onChange={handleChange}/>\r\n);","import {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.componenet';\nimport { SearchBox } from './components/search-box/search-box.component';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField:''\n    }\n  }\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  } \n  componentDidMount( ){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n  render(){\n    const {monsters,searchField} =this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox \n            placeholder='Search for a monster'\n            handleChange={this.handleChange}\n          />\n          <CardList monsters={filteredMonsters} />\n\n        </div>\n      );\n    }\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}